# Simplified RedProxy Comprehensive Test Suite
# Target: <100 lines, environment-driven configuration

services:
  # Core test targets
  http-echo:
    hostname: http-echo
    image: mendhak/http-https-echo:31
    environment:
      - HTTP_PORT=8080
      - HTTPS_PORT=8443
    networks: [test-net]

  target-server:
    hostname: target-server
    image: nginx:alpine
    networks: [test-net]

  # WebSocket test server
  websocket-server:
    hostname: websocket-server
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    networks: [test-net]
    volumes:
      - ./scripts:/scripts:ro
    command: ["uv", "run", "--frozen", "/scripts/websocket_server.py"]
    environment:
      - PORT=9998
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Upstream proxies for testing connectors
  http-proxy:
    hostname: http-proxy
    image: ubuntu/squid:latest
    networks: [test-net]
    volumes:
      - ./config/squid.conf:/etc/squid/squid.conf:ro
    healthcheck:
      test: ["NONE"]

  socks-proxy:
    hostname: socks-proxy
    image: serjs/go-socks5-proxy:latest
    networks: [test-net]
    healthcheck:
      test: ["NONE"]

  # Mock SOCKS server for BIND testing (using Python script from test-runner)
  mock-socks-server:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    volumes:
      - ./scripts:/scripts:ro
    networks: [test-net]
    command: ["python3", "/scripts/mock_socks_server.py"]

  # QUIC upstream proxy (another RedProxy instance with QUIC listener)
  quic-proxy:
    hostname: quic-proxy
    build:
      context: ../..
      dockerfile: tests/comprehensive/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    volumes:
      - ./config:/config:ro
      - ./logs:/logs:rw
    networks: [test-net]
    depends_on: [http-echo]
    command: ["redproxy", "-c", "/config/quic-proxy.yaml"]

  # SSH upstream proxy
  ssh-proxy:
    hostname: ssh-proxy
    image: linuxserver/openssh-server:latest
    environment:
      - PUID=1000
      - PGID=1000
      - PASSWORD_ACCESS=true
      - USER_PASSWORD=proxy123
      - USER_NAME=proxy
      - DOCKER_MODS=linuxserver/mods:openssh-server-ssh-tunnel
    networks: [test-net]

  # Single RedProxy instance with static config
  redproxy:
    hostname: redproxy
    build:
      context: ../..
      dockerfile: tests/comprehensive/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    volumes:
      - ./config:/config:rw
      - ./logs:/logs:rw
    networks: [test-net]
    depends_on: [http-echo, target-server, websocket-server, http-proxy, socks-proxy, quic-proxy, ssh-proxy]
    healthcheck:
      test: ["NONE"]
    #   test: ["CMD", "curl", "-f", "--connect-timeout", "3", "--max-time", "5", "http://localhost:9090/api/metrics"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    command: ["redproxy", "-c", "${REDPROXY_CONFIG:-/config/httpx.yaml}", "--log", "${REDPROXY_LOG_LEVEL:-info}"]
    environment:
      - RUST_LOG=info,tower_http=info,milu=warn,redproxy=trace,redproxy_rs::rules=info
      - RUST_BACKTRACE=1

  # Test runner with environment-driven test selection
  test-runner:
    hostname: test-runner
    build:
      context: .
      dockerfile: Dockerfile.test-runner
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    volumes:
      - ./scripts:/scripts:ro
      - ./config:/config:rw
      - ./logs:/logs:rw
      - ./reports:/reports:rw
    networks: [test-net]
    depends_on: 
      - redproxy

networks:
  test-net:
    driver: bridge
