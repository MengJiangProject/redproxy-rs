todo: let expression

let 
    a=1;
    b=a*2;
in a+b

compiles to AST:
scope
    array
        tuple
            a
            1
        tuple
            b
            2
    call
        plus
        a
        b

---
todo: array contcat
[1|[2,3]] == [1,2,3]

---
todo: add function definition
let fib(a) : int->[int] =
    let n = fib(a-1);
        x = a + n[0];
    in
        if a == 1
        then [1]
        else [x|n]
in fib(10)

---
todo: generic funtion signatures:

to_string(a) : Any->string
to_integer(a) : string->int
split(s,d) : string->string->[string]
repeat(x,n) : T -> integer -> [T]

---
todo: do block definition
do
    let x = 1;
    let y = x;
    let x = 2;
    (x,y) == (2,1)

---
todo: pattern match
let [a|b] = [1,2,3] in (1,[2,3]) == (a,b)