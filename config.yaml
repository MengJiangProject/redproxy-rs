apiVersion: v1alpha
kind: ProxyDefinition

metrics:
  # api prefix, defaults to "/api"
  # api_prefix: /api
  # static files to serve, set to null to disable, set "<embedded>" to use embedded ui (if feature enabled)
  # ui: ./ui
  bind: "[::]:8888"

listeners:
  # if type is omited, it trys the name field for type,
  - name: tproxy
    bind: 0.0.0.0:8080
  - name: http
    bind: 0.0.0.0:8081
  - name: https
    type: http
    bind: 0.0.0.0:8082
    tls:
      cert: test.crt
      key: test.key
      client:
        ca: ca.crt
        required: true
  - name: socks
    bind: 0.0.0.0:1080
    auth:
      # required means client MUST send username,
      # if it's false, user/pass is still asked from client but not check agaist following list
      # it's main used to satisfy some strange software that do not work with NoAuth option of SOCK5
      required: true
      auth_cmd:
        - test
        - "#USER#"
        - ==
        - "#PASS#"
      # users:
      #   - username: a
      #     password: a
  - name: quic
    bind: 0.0.0.0:4433
    tls:
      cert: test.crt
      key: test.key

connectors:
  - name: loadbalance
    connectors:
      - direct
      - http
    algo:
      hashBy: request.source
  - name: direct
    # bind: 192.168.100.1
    dns:
      # could be one of: google,cloudflare,system,comma splited ip list with optional port number
      servers: google
      # servers: 192.168.100.1:5353,1.1.1.1,8.8.8.8:53
      family: V6First # one of V4Only, V6Only, V4First, V6First(default)
  - name: http
    server: 192.168.100.1
    port: 8848
  - name: https
    type: http
    server: 192.168.100.1
    port: 3333
    tls:
      insecure: true
      ca: ca.crt
      auth:
        cert: proxy.crt
        key: proxy.key
  - name: socks
    server: 192.168.100.1
    port: 1080
  - name: socks-tls
    type: socks
    server: 192.168.100.1
    port: 9123
    auth:
      username: proxy
      password: fuckgfw
    tls:
      insecure: true
  - name: quic
    server: 127.0.0.1
    port: 4433
    tls:
      insecure: true

rules:
  # - filter: cidr_match(request.target.host,"127.0.0.0/8") || request.target.host == "localhost"
  #   target: deny
  # - filter: request.target.type == "domain"
  #   target: loadbalance
  - filter: request.source.host == "127.0.0.1"
    target: direct
  # available varibles are request: { source: string, target: {port:int, host:string, type:string }, listener: string }
  # available functions: split(str,str)->[str] to_string(any)->str to_integer(str)->int
  - filter: request.source =~ "127.0.0.1" and request.target =~ "google.com"
    target: direct
  - filter: request.target.type == "ipv6"
    target: https
  - filter: request.target =~ "deny-me.com"
    # target "deny" is a resvered target name for explicitly deny a matching request
    target: deny
  - target: direct
    # an empty filter means that all requests will be accepted.
    # if no rule matches the request, access will be denied.

accessLog:
  path: access.log
  format:
    script: |
      `src=${request.source} dst=${request.target} listener=${request.listener} connector=${request.connector}`
